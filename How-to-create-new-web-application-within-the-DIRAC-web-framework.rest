The new DIRAC web framework provides many facilities to develop and test web applications. This framework loads each application in a separate window, and these windows can be arranged at the desktop area  by means of resizing, moving and pinning. In this tutorial we are going to explain the ways of developing and testing new applications.

Before you start this tutorial, it is desirable that you have some experience with programming in Python, JavaScript, HTML, CSS scripting, client-server communication (such as AJAX and web sockets) and sufficient knowledge in object-oriented programming. If you are not familiar with some of the web technologies, or there has been a while since you used those technologies, please visit the W3CSchool web site (http://www.w3schools.com/).  There, you can find tutorials that you can use to learn or to refresh your knowledge for web-programming.

Each application consists of two parts:

- **Client side (CS)**: Builds the user interface and communicates with the web server in order to get necessary data and show it appropriately.
- **Server side (SS)**: Provides services to the client side run in browser.

The folder structure of the server side web installation is as follows:

- <Module name folder such as DIRAC, LHCbDIRAC, WebAppDIRAC>

  - WebApp

    - **handler**: contains all the server side implementations of the framework and all the applications.

    - **static**: contains all the static content that can be loaded by the client side such as JavaScript files, images and css files

      - <Module name folder such as DIRAC, LHCbDIRAC, WebAppDIRAC>: contains the client side implementation of each application

        - Application 1

        - Application 2

        - ...

    - **template**: contains all the templates used by the files in the handler folder

In order to explain how to develop an application, we will go step by step creating an example one. We will name it **MyApp**.

Server Side
-----------------

Each application server side logic is implemented in one Python file. The name of the file is formed by appending the word **Handler** to the name of the application. In the case of the application we want to build, the name of the Python file should be **MyAppHandler**. This file has to be located into the **handler** folder.

Be aware that If this file is not defined in the folder, the application is not going to appear in the main menu.

This file defines a Python class responsible for all server side functionality of **MyApp**. The class has to  extends **WebHandler** class which is the base class for all server side applications handling clients requests. The starting definition of this class is as follows:

.. code:: python

  from WebAppDIRAC.Lib.WebHandler import WebHandler

  class MyAppHandler(WebHandler):

For each type of client request there must be an **entry point** i.e. a method that will be invoked when a clients' requests arrive at the server. Lets say that the URL of the requested method is **MyApp/getData**. Therefore the name of the class is **MyAppHandler** and the name of the method within the class will be **web_getData**. This means that if you want a method to be accessible in the application class you have to put the prefix **"web_"** to the name of the method.

.. code:: python

  from WebAppDIRAC.Lib.WebHandler import WebHandler

  class MyAppHandler(WebHandler):
    def web_getData(self):
      self.write({“data”:[1,2,3,4]})

In order to send back response to the client, we can use the **write** method of the **WebHandler** class. This method whenever invoked, sends to the client the value given as a parameter. If the value  is of type dictionary, then the dictionary is converted to JSON string before it is sent back to the client.

The server handles all requests one-by-one which means that the server does not handle the next request until the current one is finished. This mechanism becomes a bottleneck if one request lasts longer and increases the response time for each subsequent request waiting in the server queue until the previous one has finished. Thus the server provides a way how to asynchronously handle clients' requests and mitigate this obstacle. Read the following link and tutorial for further information  [https://github.com/DIRACGrid/WebAppDIRAC/wiki/Asynchronous-handling-mechanisms-of-clients%27-requests].

Any other method that is not an entry point, can have any arbitrary name satisfying the rules of the Python programming language.

Usually the clients requests come with parameters that contain data. In order to access a parameter, you have to use the following expression:

.. code:: python

  self.request.arguments["parameter_name"][0]

or in a full example

.. code:: python

  def web_ping(self):
    pingValue = self.request.arguments["ping_val"][0]
    self.write({"pong_val": pingValue})

Every parameter value is enclosed by a list by default so the 0-index stands for taking the value out of the list.

Client Side
-----------------

The CS side consists of files needed for rendering the UI and communicating with the server side. Technologies used are JavaScript with ExtJS4.x, HTML and CSS. The files of the CS are located into the **static/<Module name folder such as DIRAC, LHCbDIRAC, WebAppDIRAC>** folder and are organized as follows:
